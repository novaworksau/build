use import="Json"
use import="Environment"

default NO_PARALLEL_TEST_PROJECTS='${E("NO_PARALLEL_TEST_PROJECTS")}'

@{/*

dotnet-test
    Run unit tests in your project.

projectFile=''
    Required. Path to the test project.json to execute

*/}

@{
    var projectText = File.ReadAllText(projectFile);
    var project = (JsonObject)Json.Deserialize(projectText);

    if (project.Keys.Contains("testRunner"))
    {
        var projectFolder = Path.GetDirectoryName(projectFile);
        var projectName = Path.GetFileName(projectFolder);

        var noParallelTestProjects = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
        if (!string.IsNullOrEmpty(NO_PARALLEL_TEST_PROJECTS))
        {
            noParallelTestProjects.UnionWith(NO_PARALLEL_TEST_PROJECTS.Split((char)','));
        }
        
        var testArgs = noParallelTestProjects.Contains(projectName) ? " -parallel none" : "";
            
        var configs = project.ValueAsJsonObject("frameworks");
        IEnumerable<string> targetFrameworks = configs == null? 
            new string[0]: 
            configs.Keys.Where(k => k.StartsWith("dnx", StringComparison.OrdinalIgnoreCase));

        foreach (var framework in targetFrameworks)
        {
            if (framework.StartsWith("dnxcore"))
            {
                 var publishFolder = Path.Combine(projectFolder, ".testPublish", framework);
                 DotnetPublish(projectFile, publishFolder, framework);
                
                var runnerExe = Path.Combine(publishFolder, "dotnet-test-xunit.exe");
                var targetTestDll = Path.Combine(publishFolder, projectName + ".dll");
                Exec(runnerExe, targetTestDll + " " + testArgs);
            }
        }
    }
}
