use import="Json"
use import="Environment"

default NO_PARALLEL_TEST_PROJECTS='${E("NO_PARALLEL_TEST_PROJECTS")}'
default KOREBUILD_TEST_SKIPMONO='${E("KOREBUILD_TEST_SKIPMONO")}'

@{/*

xunit-test
    Run unit tests in your project.

projectFile=''
    Required. Path to the test project.json to execute

*/}

@{
    if (!string.Equals(KOREBUILD_TEST_SKIPMONO, "1") && !string.Equals(KOREBUILD_TEST_SKIPMONO, "true"))
    {
        var projectText = File.ReadAllText(projectFile);
        var project = (JsonObject)Json.Deserialize(projectText);

        if (project.Keys.Contains("testRunner"))
        {
            var projectFolder = Path.GetDirectoryName(projectFile);
            var projectName = Path.GetFileName(projectFolder);

            var noParallelTestProjects = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
            if (!string.IsNullOrEmpty(NO_PARALLEL_TEST_PROJECTS))
            {
                noParallelTestProjects.UnionWith(NO_PARALLEL_TEST_PROJECTS.Split((char)','));
            }

            var testArgs = noParallelTestProjects.Contains(projectName) ? " -parallel none" : "";

            var configs = project.ValueAsJsonObject("frameworks");
            IEnumerable<string> targetFrameworks = configs == null?
                new string[0]:
                configs.Keys.Where(k => k.StartsWith("dnx", StringComparison.OrdinalIgnoreCase));

            var runnerFolder = Path.GetFullPath(Path.Combine(KoreBuildFolderPath, "build", "xunit.runner.console", "tools"));
            var xunitCoreFolder = Path.GetFullPath(Path.Combine(KoreBuildFolderPath, "build", "xunit.core", "build", "_desktop"));

            foreach (var framework in targetFrameworks)
            {
                if (!framework.StartsWith("dnxcore"))
                {
                    if (IsLinux)
                    {
                        // Work around issue with testing in parallel on Mono.
                        testArgs = " -parallel none";
                    }

                    var publishFolder = Path.Combine(projectFolder, ".testPublish", framework);
                    DotnetPublish(projectFile);
                    Copy(runnerFolder, publishFolder, "*.*", true);


                    // Copy xunit.execution.desktop. This is required in order to load the binding
                    // redirects for dlls. See this thread for more details:
                    // https://github.com/xunit/xunit/issues/732
                    Copy(xunitCoreFolder, publishFolder, "*.*", true);

                    var targetTestDll = projectName + ".dll";

                    var runnerExe = Path.GetFullPath(Path.Combine(publishFolder, "xunit.console.exe"));
                    ExecClr(runnerExe, targetTestDll + " " + testArgs, publishFolder);
                }
            }
        }
    }
}
